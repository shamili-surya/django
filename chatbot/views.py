from django.shortcuts import render
import fitz  # PyMuPDF
import logging
import requests

logger = logging.getLogger(__name__)

# ‚úÖ Extract text from uploaded PDF
def extract_text_from_pdf(pdf_file):
    with fitz.open(stream=pdf_file.read(), filetype="pdf") as doc:
        return "\n\n".join([page.get_text() for page in doc])

# ‚úÖ Keyword-based paragraph filter (instead of fuzzy matching)
def extract_top_matching_paragraphs(context, question, top_k=5):
    paragraphs = context.split("\n\n")
    keywords = question.lower().split()

    matched = []
    for para in paragraphs:
        match_count = sum(1 for word in keywords if word in para.lower())
        if match_count > 0:
            matched.append((match_count, para))

    top_paragraphs = [para for count, para in sorted(matched, reverse=True)[:top_k]]

    return "\n\n".join(top_paragraphs) if top_paragraphs else context[:2000]

# ‚úÖ Generate answer using Ollama + Gemma
def get_best_answer_with_ollama(question, context):
    prompt = f"""
    Use the following document content to answer the question.

    Context:
    {context[:4000]}

    Question: {question}
    """
    try:
        print("üîç Prompt to Gemma:\n", prompt)
        response = requests.post(
            'http://localhost:11434/api/generate',
            json={
                "model": "gemma",
                "prompt": prompt,
                "stream": False
            },
            timeout=60
        )

        print("üü¢ Ollama Response:", response.status_code, response.text)

        if response.status_code == 200:
            data = response.json()
            return data.get("response", "").strip() or "‚ö†Ô∏è No response generated by Gemma."
        else:
            return f"‚ùå Ollama responded with status code {response.status_code}."

    except Exception as e:
        print("üî• Ollama ERROR:", e)
        return "Sorry Shamili, Gemma couldn't answer right now."

# ‚úÖ Main chatbot view
def chatbot_ui(request):
    answer = ""
    context = ""

    if request.method == "POST":
        question = request.POST.get("question", "").strip()
        pdf_file = request.FILES.get("pdf_file")

        if pdf_file:
            context = extract_text_from_pdf(pdf_file)
            request.session['pdf_context'] = context
        else:
            context = request.session.get('pdf_context', '')

        if context:
            relevant_context = extract_top_matching_paragraphs(context, question)
            print("‚úÖ Filtered Context:\n", relevant_context)
            answer = get_best_answer_with_ollama(question, relevant_context)
        else:
            q = question.lower()
            if "hi" in q or "hello" in q:
                answer = "Hello Shamili! How can I help you today?"
            elif "your name" in q:
                answer = "I'm your chatbot."
            elif "how are you" in q:
                answer = "I'm good, Shamili! How are you?"
            elif "bye" in q:
                answer = "Bye Shamili! Come back soon!"
            else:
                answer = "‚ö†Ô∏è Please upload a PDF first to ask questions from it."

    return render(request, 'chatbot/chat_ui.html', {'answer': answer})
