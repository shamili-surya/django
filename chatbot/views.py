from django.shortcuts import render
import fitz  # PyMuPDF
import logging
import requests
from nltk.corpus import wordnet

logger = logging.getLogger(__name__)

# ‚úÖ Extract text from uploaded PDF
def extract_text_from_pdf(pdf_file):
    with fitz.open(stream=pdf_file.read(), filetype="pdf") as doc:
        return "\n\n".join([page.get_text() for page in doc])

# ‚úÖ Get synonyms using WordNet
def get_synonyms(word):
    synonyms = set()
    for syn in wordnet.synsets(word):
        for lemma in syn.lemmas():
            synonyms.add(lemma.name().lower().replace("_", " "))
    return list(synonyms)

# ‚úÖ Improved paragraph filtering with keyword boosting
def extract_top_matching_paragraphs(context, question, top_k=5):
    paragraphs = context.split("\n\n")
    keywords = question.lower().split()

    all_keywords = set(keywords)
    for word in keywords:
        all_keywords.update(get_synonyms(word))

    matched = []
    for para in paragraphs:
        para_text = para.lower()
        score = sum(1 for word in all_keywords if word in para_text)

        boost_keywords = [
            "advantages of django",
            "features of django",
            "key features",
            "django provides",
            "django has",
            "django supports",
            "django offers",
            "django capabilities",
            "framework support",
            "orm support",
            "history of django",
            "django was started",
            "django released",
            "django created",
            "django began",
            "origin of django"
        ]

        if any(boost in para_text for boost in boost_keywords):
            score += 15

        if score > 0:
            matched.append((score, para))
            print(f"‚úÖ SCORE {score}: {para[:100]}...")

    if not matched:
        print("‚ö†Ô∏è No strong match found. Returning first few paragraphs.")
        return "\n\n".join(paragraphs[:top_k])[:2000]

    top_paragraphs = [para for score, para in sorted(matched, reverse=True)[:top_k]]
    return "\n\n".join(top_paragraphs)[:2000]

# ‚úÖ Generate answer using Ollama + Gemma
def get_best_answer_with_ollama(question, context):
    prompt = f"""
Use the following document content to answer the question.

Context:
{context}

Question: {question}
"""
    try:
        print("\nüîç Prompt to Gemma:\n", prompt)
        response = requests.post(
            'http://localhost:11434/api/generate',
            json={
                "model": "gemma",
                "prompt": prompt,
                "stream": False
            },
            timeout=180
        )

        print("üü¢ Ollama Response Code:", response.status_code)
        print("üü¢ Ollama Raw Response Text:\n", response.text)

        if response.status_code == 200:
            data = response.json()
            return data.get("response", "").strip() or "‚ö†Ô∏è No response generated by Gemma."
        else:
            return f"‚ùå Ollama responded with status code {response.status_code}."

    except Exception as e:
        print("üî• Ollama ERROR:", e)
        return "Sorry Shamili, Gemma couldn't answer right now."

# ‚úÖ Main chatbot view
def chatbot_ui(request):
    answer = ""
    context = ""

    if request.method == "POST":
        question = request.POST.get("question", "").strip().lower()
        pdf_file = request.FILES.get("pdf_file")

        # ‚úÖ Basic greetings and fallbacks
        if question in ["hi", "hello", "hey"]:
            answer = "Hello Shamili! How can I help you today?"
            return render(request, 'chatbot/chat_ui.html', {'answer': answer})
        elif "your name" in question:
            answer = "I'm your chatbot."
            return render(request, 'chatbot/chat_ui.html', {'answer': answer})
        elif "how are you" in question:
            answer = "I'm good, Shamili! How are you?"
            return render(request, 'chatbot/chat_ui.html', {'answer': answer})
        elif "bye" in question:
            answer = "Bye Shamili! Come back soon!"
            return render(request, 'chatbot/chat_ui.html', {'answer': answer})

        # ‚úÖ Load or reuse context
        if pdf_file:
            context = extract_text_from_pdf(pdf_file)
            request.session['pdf_context'] = context
        else:
            context = request.session.get('pdf_context', '')

        if context:
            relevant_context = extract_top_matching_paragraphs(context, question)
            print("‚úÖ Filtered Context:\n", relevant_context)
            answer = get_best_answer_with_ollama(question, relevant_context)
        else:
            answer = "‚ö†Ô∏è Please upload a PDF first to ask questions from it."

    return render(request, 'chatbot/chat_ui.html', {'answer': answer})
